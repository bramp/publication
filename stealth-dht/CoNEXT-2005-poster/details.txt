--------------------------------------------------------------------------------
"Stealth Distributed Hash Table: Unleashing the Real Potential of Peer-to-Peer"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Distributed Hash Tables (DHTs) are a form of
   * Decentralised
   * Scalable
   * Resilient
Peer-to-Peer network, often used as a substrate for applications such as
   * Distributed storage
   * Application Layer Multicast 
   * Load-balancing systems
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
DHTs assume nodes are homogeneous in terms of bandwidth and stability,
and that it is safe to assign the same privileges to everyone.

In reality, this is not the case
   * Underpowered nodes slow down message forwarding
   * Unstable nodes cause churn (overhead incurred due to nodes rapidly joining 
     and leaving the network)
      * Churn causes many DHT implementations to simply break down
   * Malicious nodes are allowed to forward messages, allowing for interception
     and alteration
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Stealth DHTs can solve these problems by making a subset of nodes invisible

Stealth Nodes
   * Prevented from storing keys and forwarding messages
   * Ideally low powered and unreliable machines

The remaining nodes provide the routing functionality for the DHT

Service Nodes
   * Can perform all operations supported by the DHT
   * Ideally highly capable and reliable machines
   
The assignment of these roles is application dependent and is in no way
prescribed or constrained by the Stealth DHT itself
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Stealth DHTs achieve this differentation through the use of a lightweight
join mechanism for stealth nodes

   * Stealth nodes never announce their presence in the DHT
      * Meaning they never appear in any routing tables
         * ...so when a Stealth node joins or leaves, no routing data need
           change
           
   * Stealth nodes can keep their own routing tables up to date by periodically
     polling the network
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
To evaluate the performance of the algorithm, we implemented both  a generic DHT
(Pastry) and a Stealth DHT in our own discrete-event packet-level simulator.
    - The topology consisted of 1,000 routers in a transit-stub configuration
      (with 4% transit nodes), generated by GT-ITM.
		- Simulations were ran with a realistic workload in which randomly selected
		  nodes performed put and get operations on a set of 1,000,000 keys
		- These simulations were run for both Pastry and Stealth DHTs, with and
		  without churn in the network.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Regardless of churn, Stealth DHTs outperform Pastry in many standard DHT
measurements (e.g. average hop count, stretch, join overhead and load balancing)

	  - Without churn, the cost of using a Stealth DHT is increased link stress 
	    for a small percentage of the network compared to Pastry, as well as 
	    higher average load for Service nodes.
	    
	  - With churn, Pastry generates a large number of maintenance messages -
	    under churn, Stealth DHTs were found to have a lower average and maximum
	    link stress, as well as reduced average load per node.
--------------------------------------------------------------------------------